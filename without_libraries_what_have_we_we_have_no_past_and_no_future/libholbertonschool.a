#include <unistd.h>
#include "my_functions.h"

/* include print_char function to print letters */
int print_char(char c)
{
  return (write(1, &c, 1)); /* write to output */
}

/* call absolute function and test for the value of n */
int absolute(int n)
{
  if (n < 0)
    {
      return(n * -1); /* return n as a positive integer */
    }
  if (n == 0)
    {
      return(0); /* return 0 */
    }
  if (n > 0)
    {
      return (n); /* return n */
    }
  return (0);
}

char *concat_strings(char *dest, const char *src)
{
  int i;
  int j = 0;
  int dest_len = 0;
  int src_len = 0;
  while(dest[dest_len] != '\0') /* find length of string */
  {
    dest_len++;
  }
  while(src[src_len] != '\0') /* find length of string */
  {
    src_len++;
  }
  for (i = src_len; i > 0; i--)
  {
  	dest[dest_len] = src[j];
  	j++;
  	dest_len++;
  }
  return dest; /* return pointer from function */
}

/* call first_digit function to return the first digit of a number */
int first_digit(int n)
{
  int length = 0;
  int power = 1;
  int digit, length_stored, i;
  if (n == -2147483648 || n == 2147483647)
    {n = 2;}
  if (n < 0 && n != -2147483648)/* make n positive*/
    {n *= -1;}
  for (i = n; i > 0; i = i / 10)/* find the decimal length of n */
    {length++;}
  length_stored = length;/* store value of length for later subtraction*/
  for (;length > 0; length--)/* subtract length by one for each iteration */
    {for (i = 1; length_stored > i; i++)
	{power *= 10;}
      digit = n / power; /* divide n by power to find the digit */
      return(digit); /* return the digit for main function */
      n = n - (digit * power);
      power = 1;
      length_stored--;}
  return (0);
}

/* call char lowercase function */
char lowercase(char c)
{
  if (c > 64 && c < 91) /* if the character is uppercase */
    {
      return (c + 32); /* print lowercase letter */
    }
  else
    {
      return (c); /* print character */
    }
}

/* for number -2147483648, print minus sign and first digit */
void min()
{
   print_char('-'); /* print minus sign */
   print_char('2'); /* print digit '2' */
}

/* call print_number function to print each digit using print_char */
void print_number(int n)
{
  int length = 0;
  int power = 1;
  int digit, length_stored, i;
  if (n == -2147483648)
    {n = 147483648;
      min();} /* call min function */
  if (n < 0 && n != -2147483648)/* print '-' and make n make positive*/
    {n *= -1;
     print_char('-');} /* print minus sign */
  if (n == 0)
    {print_char('0');} /* print digit '0' */
  for (i = n; i > 0; i = i / 10)/* find the decimal length of n */
    {length++;}
    length_stored = length;/* store value of length for later subtraction*/
  for (;length > 0; length--)/* subtract length by one for each iteration */
    {for (i = 1; length_stored > i; i++)
      {power *= 10;}
      digit = n / power; /* divide n by power to find the digit */
      print_char(digit + 48); /* print digit plus 48 on ascii */
      n = n - (digit * power);
      power = 1;
      length_stored--;}
}

char *uppercase_string(char *s)
{
  int i;
  for (i = 0; s[i] != '\0'; i++) { /* loop through string */
    if (s[i] >= 'a' && s[i] <= 'z') {
      s[i] = s[i] - 32; /* reassign lowercase to upcase */
    }
  }
  return (s);
}

char *cap_string(char *s)
{
  int i;
  for (i = 0; s[i] != '\0'; i++) { /* loop through string */
    if (s[i-1] == ' ' || s[i-1] == '\n' || s[i-1] == '\t') {
      if (s[i] >= 'a' && s[i] <= 'z') {
        s[i] = s[i] - 32; /* reassign lowercase to upcase */
      }
    }
  }
  return (s);
}

char *nconcat_strings(char *dest, const char *src, int n)
{
  int i;
  int dest_len = 0;
  int src_len = 0;
  while(dest[dest_len] != '\0') /* find length of string */
  {
    dest_len++;
  }
  while(src[src_len] != '\0') /* find length of string */
  {
    src_len++;
  }
  if (n > src_len)
  {
  	n = src_len;
  }
  for (i = 0; i < n; i++)
  {
  	dest[dest_len] = src[i];
  	dest_len++;
  }
  return dest; /* return pointer from function */
}

int power(int x, int y) {
  long z;
  if (y < 0 || x < 0) {
    return -1;
  }
  if (y == 0) {
    return 1;
  }
  if (y == 1) {
    return x;
  }
  y -= 1;
  z = x * power(x, y);
  if (z > 2147483647) {
    return -1;
  }
  if (z < 0) {
    return -1;
  }
  return x * power(x, y); /* recursively call the function */
}

void swap_int(int *a, int *b)
{
  int temp;
  /* store the value located at address of a */
  temp = *a;
  /* reassign the value of *a to the value of *b */
  *a = *b;
  *b = temp;
}

/* call char uppercase function */
char uppercase(char c)
{
  if (c > 96 && c < 123)
    {
      return (c - 32); /* print uppercase letter */
    }
  else
    {
      return (c); /* print character */
    }
}

void print_array(int *a, int n)
{
	int i, number;
	if (n > 0)
	{
		for (i = 0; i < n; i++)
		{
			number = a[i];
			neg_zero(number); /* print out the number */
			if(i != n - 1) /* handle the last number */
			{
				print_char(',');
				print_char(' ');
			}
			else
			{
				print_char('\n');
			}
		}
	}
	else if (n <= 0)
	{
		print_char('\n');
	}
}

void min()
{
   print_char('-'); /* print minus sign */
   print_char('2'); /* print digit '2' */
}

void neg_zero(int n)
{
  	if (n == -2147483648)
    	{
    		n = 147483648;
      		min();
      	} /* call min function */
  	if (n < 0 && n != -2147483648)/* print '-' and make n make positive*/
	    {
	    	n *= -1;
	     	print_char('-');
	    } /* print minus sign */
    if (n == 0)
    	{
	    	print_char('0');
	    } /* print digit '0' */
	print_num(n);
}

void print_num(int n)
{
	int length = 0;
  	int power = 1;
  	int digit, length_stored, i;
	for (i = n; i > 0; i = i / 10)/* find the decimal length of n */
	    {
	    	length++;
	    }
    length_stored = length;/* store value of length for later subtraction*/
    for (;length > 0; length--)/* subtract length by one for each iteration */
	    {
	    	for (i = 1; length_stored > i; i++)
	      	{
	      		power *= 10;
	      	}
	        digit = n / power; /* divide n by power to find the digit */
	        print_char(digit + 48); /* print digit plus 48 on ascii */
	        n = n - (digit * power);
	        power = 1;
	        length_stored--;
	    }
}

int square_root(int n) {
  int temp = n; /* store initial value for later testing */
  int root;
  root = count_square(n, temp);
  return root;
}

int count_square(int n, int temp)
{
  if (n * n == temp)
  {
    return n;
  }
  if (n < 1) {
    return -1;
  }
  n -= 1; /* decrement one for each time through */
  return count_square(n, temp);
}

int str_len(char *str)
{
  int i;
  /* break out of loop when string reaches 0 in memory */
  for (i = 0; i >= 0; i++) {
    if (str[i] == 0) {
      break;
    }
  }
  return (i);
}

char *string_copy(char *dest, const char *src)
{
  int i;
  int src_len = 0;
  while(src[src_len] != '\0') /* find length of string */
  {
    src_len++;
  }
  for (i = 0; i < src_len && src[i] != '\0'; i++)
      dest[i] = src[i]; /* copy chars into new array */
  for ( ; i < src_len; i++)
      dest[i] = '\0'; /* declare end of array */
  return dest;
}

int is_prime_number(int n)
{
  return count_square(n, n); /* return result of count_square function. */
}

int count_square(int n, int temp)
{
  if (n * n == temp || n < 0)
  {
    return 0;
  }
  if (n == 0) {
    return 1;
  }
  n -= 1; /* decrement one for each time through */
  return count_square(n, temp);
}

void print_string(char *str)
{
  int i;
  /* break out of loop when string reaches 0 in memory */
  for (i = 0; i >= 0; i++) {
    if (str[i] == 0)
      {
	       break;
      }
    else
      {
	/* print char of string */
	print_char(str[i]);
      }
  }
  print_char(str[i]);
}

char *string_ncopy(char *dest, const char *src, int n)
{
  int i = 0;
  for (i = 0; i < n && src[i] != '\0'; i++)
    dest[i] = src[i]; /* copy chars into new array */
  for ( ; i < n; i++)
    dest[i] = '\0'; /* declare end of array */
  return dest;
}

/* call positive_or_not function */
void positive_or_not(int n)
{
  char P = 'P';
  char N = 'N';
  char Z = 'Z';
  /* create conditional statements to print P, N, or Z */
  if (n > 0)
    {
      /* call print_char function with variable as argument */
      print_char(P);
    }
  if (n < 0)
    {
      /* call print_char function with variable as argument */
      print_char(N);
    }
  if (n == 0)
    {
      /* call print_char function with variable as argument */
      print_char(Z);
    }
}

void reverse_string(char *s)
{
  int i, j, k;

  /* find the length of the string */
  for (i = 0; i >= 0; i++) {
    if (s[i] == 0) {
      break;
    }
  }
  /* subtract 1 from i */
  i -= 1;
  for(j = 0; j < i; j++){
    /* store last array item in k */
    k = s[i];
    s[i] = s[j];
    /* assign first array item as k */
    s[j] = k;
    /* subtract one to cycle through array */
    i--;
  }
}

int strings_compare(char *s1, const char *s2)
{
  int i = 0;
  int j = 0;
  for ( ; s1[i] != '\0'; i++)
  {
  	if (s1[j] != s2[j]) /* if chars are different, break */
	  {
	    break;
	  }
	  j++;
  }
  return(s1[j] - s2[j]); /* return difference in chars */
}

void reverse_array(int *a, int n)
{
  int temp;
  int half;
  int i;
  n -= 1;
  half = n / 2;
  for (i = 0; n > half; n--)
  {
  	temp = a[n]; /* store last char in temp */
  	a[n] = a[i]; /* assign last character as first */
  	a[i] = temp; /* assign first character as temp */
  	i++;
  }
}

int string_to_integer(char *s){
  int long i, n, temp, digit;
  int place = 0;
  int isNegative = 0;
  /* break out of loop when string reaches 0 in memory */
  for (i = 0; i >= 0; i++) {
    temp = i - 1;
    if (s[i] == 0){break;}
    else if (s[i] <= 47 || s[i] >= 58)
      {if (s[i] == 45) {isNegative += 1; }
	if (s[temp] > 47 && s[temp] < 58) {break;}}
    else if (s[i] > 47 && s[i] < 58)
      {digit = s[i] - 48;
	if (place == 0) {n = digit;
	  place += 1;
	  if (isNegative %2 != 0) {place += 1; }}
	else if (place > 0) {
	  n *= 10;
	  n += digit;
	  place += 1;}}}
  if (n == 2147483648 && place > 10) {return (n);}
  else if (n == 2147483648 && place == 10) {return 0;}
  else if (n > 2147483648) {return 0;}
  else {if (isNegative %2 != 0) {print_char('-');}
  return (n);}
}
